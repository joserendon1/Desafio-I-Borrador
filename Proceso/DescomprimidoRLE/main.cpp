#include <iostream>

void decompressRLE(const unsigned char* compressed, int compressedLen, char* output, int& outputLen) {
    outputLen = 0;

    // Procesar cada token (3 bytes: 2 bytes longitud + 1 byte carácter)
    for (int i = 0; i < compressedLen; i += 3) {
        if (i + 2 >= compressedLen) break;

        // Leer longitud (big-endian) - 2 bytes
        int length = (compressed[i] << 8) | compressed[i + 1];
        char character = compressed[i + 2];

        // Repetir el carácter 'length' veces
        for (int j = 0; j < length; j++) {
            output[outputLen++] = character;
        }
    }

    output[outputLen] = '\0';  // Carácter nulo al final
}

int main() {
    // Tu array RLE completo
    unsigned char resultado[469] = {
        0x00, 0x05, 'a', 0x00, 0x06, 'b', 0x00, 0x06, 'c', 0x00, 0x04, 'd', 0x00, 0x04, 'e',
        0x00, 0x04, 'f', 0x00, 0x04, 'g', 0x00, 0x04, 'h', 0x00, 0x04, 'i', 0x00, 0x04, 'j',
        0x00, 0x04, 'k', 0x00, 0x04, 'l', 0x00, 0x04, 'm', 0x00, 0x04, 'n', 0x00, 0x04, 'o',
        0x00, 0x04, 'p', 0x00, 0x04, 'q', 0x00, 0x04, 'r', 0x00, 0x04, 's', 0x00, 0x04, 't',
        0x00, 0x04, 'u', 0x00, 0x04, 'v', 0x00, 0x04, 'w', 0x00, 0x04, 'x', 0x00, 0x04, 'y',
        0x00, 0x04, 'z', 0x00, 0x04, 'a', 0x00, 0x06, 'b', 0x00, 0x06, 'c', 0x00, 0x04, 'd',
        0x00, 0x04, 'e', 0x00, 0x04, 'f', 0x00, 0x04, 'g', 0x00, 0x04, 'h', 0x00, 0x04, 'i',
        0x00, 0x04, 'j', 0x00, 0x04, 'k', 0x00, 0x04, 'l', 0x00, 0x04, 'm', 0x00, 0x04, 'n',
        0x00, 0x04, 'o', 0x00, 0x04, 'p', 0x00, 0x04, 'q', 0x00, 0x04, 'r', 0x00, 0x04, 's',
        0x00, 0x04, 't', 0x00, 0x04, 'u', 0x00, 0x04, 'v', 0x00, 0x04, 'w', 0x00, 0x04, 'x',
        0x00, 0x04, 'y', 0x00, 0x04, 'z', 0x00, 0x04, 'a', 0x00, 0x06, 'b', 0x00, 0x06, 'c',
        0x00, 0x04, 'd', 0x00, 0x04, 'e', 0x00, 0x04, 'f', 0x00, 0x04, 'g', 0x00, 0x04, 'h',
        0x00, 0x04, 'i', 0x00, 0x04, 'j', 0x00, 0x04, 'k', 0x00, 0x04, 'l', 0x00, 0x04, 'm',
        0x00, 0x04, 'n', 0x00, 0x04, 'o', 0x00, 0x04, 'p', 0x00, 0x04, 'q', 0x00, 0x04, 'r',
        0x00, 0x04, 's', 0x00, 0x04, 't', 0x00, 0x04, 'u', 0x00, 0x04, 'v', 0x00, 0x04, 'w',
        0x00, 0x04, 'x', 0x00, 0x04, 'y', 0x00, 0x04, 'z', 0x00, 0x04, 'a', 0x00, 0x06, 'b',
        0x00, 0x06, 'c', 0x00, 0x04, 'd', 0x00, 0x04, 'e', 0x00, 0x04, 'f', 0x00, 0x04, 'g',
        0x00, 0x04, 'h', 0x00, 0x04, 'i', 0x00, 0x04, 'j', 0x00, 0x04, 'k', 0x00, 0x04, 'l',
        0x00, 0x04, 'm', 0x00, 0x04, 'n', 0x00, 0x04, 'o', 0x00, 0x04, 'p', 0x00, 0x04, 'q',
        0x00, 0x04, 'r', 0x00, 0x04, 's', 0x00, 0x04, 't', 0x00, 0x04, 'u', 0x00, 0x04, 'v',
        0x00, 0x04, 'w', 0x00, 0x04, 'x', 0x00, 0x04, 'y', 0x00, 0x04, 'z', 0x00, 0x04, 'a',
        0x00, 0x06, 'b', 0x00, 0x06, 'c', 0x00, 0x04, 'd', 0x00, 0x04, 'e', 0x00, 0x04, 'f',
        0x00, 0x04, 'g', 0x00, 0x04, 'h', 0x00, 0x04, 'i', 0x00, 0x04, 'j', 0x00, 0x04, 'k',
        0x00, 0x04, 'l', 0x00, 0x04, 'm', 0x00, 0x04, 'n', 0x00, 0x04, 'o', 0x00, 0x04, 'p',
        0x00, 0x04, 'q', 0x00, 0x04, 'r', 0x00, 0x04, 's', 0x00, 0x04, 't', 0x00, 0x04, 'u',
        0x00, 0x04, 'v', 0x00, 0x04, 'w', 0x00, 0x04, 'x', 0x00, 0x04, 'y', 0x00, 0x04, 'z'
    };

    char decompressed[10000];
    int decompressedLen;

    // Descomprimir
    decompressRLE(resultado, 469, decompressed, decompressedLen);

    std::cout << "=== TEXTO RLE DESCOMPRIMIDO ===" << std::endl;
    std::cout << "Longitud: " << decompressedLen << " caracteres" << std::endl;
    std::cout << "Contenido: " << decompressed << std::endl;

    return 0;
}
